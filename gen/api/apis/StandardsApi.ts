/* tslint:disable */
/* eslint-disable */
/**
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Action, Standard } from "../models/index";
import {
  ActionFromJSON,
  ActionToJSON,
  StandardFromJSON,
  StandardToJSON,
} from "../models/index";

/** */
export class StandardsApi extends runtime.BaseAPI {
  /**
   * Returns actions available to use in bundle shortcuts
   */
  async actionsControllerFindAllRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Action>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/actions`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(
      response,
      (jsonValue) => jsonValue.map(ActionFromJSON),
    );
  }

  /**
   * Returns actions available to use in bundle shortcuts
   */
  async actionsControllerFindAll(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Action>> {
    const response = await this.actionsControllerFindAllRaw(initOverrides);
    return await response.value();
  }

  /**
   * Returns standards and methods available to use in bundle shortcuts
   */
  async standardsControllerStandardsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Standard>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/standards`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(
      response,
      (jsonValue) => jsonValue.map(StandardFromJSON),
    );
  }

  /**
   * Returns standards and methods available to use in bundle shortcuts
   */
  async standardsControllerStandards(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Standard>> {
    const response = await this.standardsControllerStandardsRaw(initOverrides);
    return await response.value();
  }
}
