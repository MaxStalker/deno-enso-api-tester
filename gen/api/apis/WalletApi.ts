/* tslint:disable */
/* eslint-disable */
/**
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  Wallet,
  WalletAllowances,
  WalletApproveTransaction,
} from "../models/index";
import {
  WalletAllowancesFromJSON,
  WalletAllowancesToJSON,
  WalletApproveTransactionFromJSON,
  WalletApproveTransactionToJSON,
  WalletFromJSON,
  WalletToJSON,
} from "../models/index";

export interface WalletControllerCreateApproveTransactionRequest {
  fromAddress: string;
  tokenAddress: string;
  amount: string;
  chainId?: number;
  routingStrategy?: WalletControllerCreateApproveTransactionRoutingStrategyEnum;
}

export interface WalletControllerWalletRequest {
  fromAddress: string;
  chainId?: number;
  routingStrategy?: WalletControllerWalletRoutingStrategyEnum;
}

export interface WalletControllerWalletApprovalsRequest {
  fromAddress: string;
  chainId?: number;
  routingStrategy?: WalletControllerWalletApprovalsRoutingStrategyEnum;
}

export interface WalletControllerWalletBalancesRequest {
  eoaAddress: string;
  useEoa: boolean;
  chainId?: number;
}

/** */
export class WalletApi extends runtime.BaseAPI {
  /**
   * Returns transaction that approves your EnsoWallet to spend tokens
   */
  async walletControllerCreateApproveTransactionRaw(
    requestParameters: WalletControllerCreateApproveTransactionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WalletApproveTransaction>> {
    if (requestParameters["fromAddress"] == null) {
      throw new runtime.RequiredError(
        "fromAddress",
        'Required parameter "fromAddress" was null or undefined when calling walletControllerCreateApproveTransaction().',
      );
    }

    if (requestParameters["tokenAddress"] == null) {
      throw new runtime.RequiredError(
        "tokenAddress",
        'Required parameter "tokenAddress" was null or undefined when calling walletControllerCreateApproveTransaction().',
      );
    }

    if (requestParameters["amount"] == null) {
      throw new runtime.RequiredError(
        "amount",
        'Required parameter "amount" was null or undefined when calling walletControllerCreateApproveTransaction().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["chainId"] != null) {
      queryParameters["chainId"] = requestParameters["chainId"];
    }

    if (requestParameters["fromAddress"] != null) {
      queryParameters["fromAddress"] = requestParameters["fromAddress"];
    }

    if (requestParameters["routingStrategy"] != null) {
      queryParameters["routingStrategy"] = requestParameters["routingStrategy"];
    }

    if (requestParameters["tokenAddress"] != null) {
      queryParameters["tokenAddress"] = requestParameters["tokenAddress"];
    }

    if (requestParameters["amount"] != null) {
      queryParameters["amount"] = requestParameters["amount"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/wallet/approve`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(
      response,
      (jsonValue) => WalletApproveTransactionFromJSON(jsonValue),
    );
  }

  /**
   * Returns transaction that approves your EnsoWallet to spend tokens
   */
  async walletControllerCreateApproveTransaction(
    requestParameters: WalletControllerCreateApproveTransactionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WalletApproveTransaction> {
    const response = await this.walletControllerCreateApproveTransactionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns EnsoWallet address details
   */
  async walletControllerWalletRaw(
    requestParameters: WalletControllerWalletRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Wallet>>> {
    if (requestParameters["fromAddress"] == null) {
      throw new runtime.RequiredError(
        "fromAddress",
        'Required parameter "fromAddress" was null or undefined when calling walletControllerWallet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["chainId"] != null) {
      queryParameters["chainId"] = requestParameters["chainId"];
    }

    if (requestParameters["fromAddress"] != null) {
      queryParameters["fromAddress"] = requestParameters["fromAddress"];
    }

    if (requestParameters["routingStrategy"] != null) {
      queryParameters["routingStrategy"] = requestParameters["routingStrategy"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/wallet`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(
      response,
      (jsonValue) => jsonValue.map(WalletFromJSON),
    );
  }

  /**
   * Returns EnsoWallet address details
   */
  async walletControllerWallet(
    requestParameters: WalletControllerWalletRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Wallet>> {
    const response = await this.walletControllerWalletRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns all approvals for a given wallet
   */
  async walletControllerWalletApprovalsRaw(
    requestParameters: WalletControllerWalletApprovalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<WalletAllowances>>> {
    if (requestParameters["fromAddress"] == null) {
      throw new runtime.RequiredError(
        "fromAddress",
        'Required parameter "fromAddress" was null or undefined when calling walletControllerWalletApprovals().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["chainId"] != null) {
      queryParameters["chainId"] = requestParameters["chainId"];
    }

    if (requestParameters["fromAddress"] != null) {
      queryParameters["fromAddress"] = requestParameters["fromAddress"];
    }

    if (requestParameters["routingStrategy"] != null) {
      queryParameters["routingStrategy"] = requestParameters["routingStrategy"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/wallet/approvals`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(
      response,
      (jsonValue) => jsonValue.map(WalletAllowancesFromJSON),
    );
  }

  /**
   * Returns all approvals for a given wallet
   */
  async walletControllerWalletApprovals(
    requestParameters: WalletControllerWalletApprovalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<WalletAllowances>> {
    const response = await this.walletControllerWalletApprovalsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /** */
  async walletControllerWalletBalancesRaw(
    requestParameters: WalletControllerWalletBalancesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["eoaAddress"] == null) {
      throw new runtime.RequiredError(
        "eoaAddress",
        'Required parameter "eoaAddress" was null or undefined when calling walletControllerWalletBalances().',
      );
    }

    if (requestParameters["useEoa"] == null) {
      throw new runtime.RequiredError(
        "useEoa",
        'Required parameter "useEoa" was null or undefined when calling walletControllerWalletBalances().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["chainId"] != null) {
      queryParameters["chainId"] = requestParameters["chainId"];
    }

    if (requestParameters["eoaAddress"] != null) {
      queryParameters["eoaAddress"] = requestParameters["eoaAddress"];
    }

    if (requestParameters["useEoa"] != null) {
      queryParameters["useEoa"] = requestParameters["useEoa"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/v1/wallet/balances`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides);

    return new runtime.JSONApiResponse(response);
  }

  /** */
  async walletControllerWalletBalances(
    requestParameters: WalletControllerWalletBalancesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const out = await this.walletControllerWalletBalancesRaw(
      requestParameters,
      initOverrides,
    );
    return out.value();
  }
}

/**
 * @export
 */
export const WalletControllerCreateApproveTransactionRoutingStrategyEnum = {
  Ensowallet: "ensowallet",
  Router: "router",
  Delegate: "delegate",
} as const;
export type WalletControllerCreateApproveTransactionRoutingStrategyEnum =
  typeof WalletControllerCreateApproveTransactionRoutingStrategyEnum[
    keyof typeof WalletControllerCreateApproveTransactionRoutingStrategyEnum
  ];
/**
 * @export
 */
export const WalletControllerWalletRoutingStrategyEnum = {
  Ensowallet: "ensowallet",
  Router: "router",
  Delegate: "delegate",
} as const;
export type WalletControllerWalletRoutingStrategyEnum =
  typeof WalletControllerWalletRoutingStrategyEnum[
    keyof typeof WalletControllerWalletRoutingStrategyEnum
  ];
/**
 * @export
 */
export const WalletControllerWalletApprovalsRoutingStrategyEnum = {
  Ensowallet: "ensowallet",
  Router: "router",
  Delegate: "delegate",
} as const;
export type WalletControllerWalletApprovalsRoutingStrategyEnum =
  typeof WalletControllerWalletApprovalsRoutingStrategyEnum[
    keyof typeof WalletControllerWalletApprovalsRoutingStrategyEnum
  ];
