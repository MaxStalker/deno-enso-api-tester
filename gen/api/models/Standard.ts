/* tslint:disable */
/* eslint-disable */
/**
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { StandardAction } from "./StandardAction";
import {
  StandardActionFromJSON,
  StandardActionFromJSONTyped,
  StandardActionToJSON,
} from "./StandardAction";
import type { Protocol } from "./Protocol";
import {
  ProtocolFromJSON,
  ProtocolFromJSONTyped,
  ProtocolToJSON,
} from "./Protocol";

/**
 * @export
 * @interface Standard
 */
export interface Standard {
  /**
   * @type {Protocol}
   * @memberof Standard
   */
  protocol: Protocol;
  /**
   * @type {Array<Protocol>}
   * @memberof Standard
   */
  forks: Array<Protocol>;
  /**
   * @type {Array<StandardAction>}
   * @memberof Standard
   */
  actions: Array<StandardAction>;
}

/**
 * Check if a given object implements the Standard interface.
 */
export function instanceOfStandard(value: object): value is Standard {
  if (!("protocol" in value) || value["protocol"] === undefined) return false;
  if (!("forks" in value) || value["forks"] === undefined) return false;
  if (!("actions" in value) || value["actions"] === undefined) return false;
  return true;
}

export function StandardFromJSON(json: any): Standard {
  return StandardFromJSONTyped(json, false);
}

export function StandardFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Standard {
  if (json == null) {
    return json;
  }
  return {
    "protocol": ProtocolFromJSON(json["protocol"]),
    "forks": ((json["forks"] as Array<any>).map(ProtocolFromJSON)),
    "actions": ((json["actions"] as Array<any>).map(StandardActionFromJSON)),
  };
}

export function StandardToJSON(value?: Standard | null): any {
  if (value == null) {
    return value;
  }
  return {
    "protocol": ProtocolToJSON(value["protocol"]),
    "forks": ((value["forks"] as Array<any>).map(ProtocolToJSON)),
    "actions": ((value["actions"] as Array<any>).map(StandardActionToJSON)),
  };
}
