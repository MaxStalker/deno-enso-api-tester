/* tslint:disable */
/* eslint-disable */
/**
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SimplePath } from "./SimplePath";
import {
  SimplePathFromJSON,
  SimplePathFromJSONTyped,
  SimplePathToJSON,
} from "./SimplePath";

/**
 * @export
 * @interface QuoteRouteInputs
 */
export interface QuoteRouteInputs {
  /**
   * Chain ID of the network to execute the transaction on
   * @type {number}
   * @memberof QuoteRouteInputs
   */
  chainId?: number;
  /**
   * Ethereum address of the wallet to send the transaction from
   * @type {string}
   * @memberof QuoteRouteInputs
   */
  fromAddress?: string;
  /**
   * Routing strategy to use
   * @type {string}
   * @memberof QuoteRouteInputs
   */
  routingStrategy?: QuoteRouteInputsRoutingStrategyEnum | null;
  /**
   * Ordered array of paths that you want to simulate
   * @type {Array<SimplePath>}
   * @memberof QuoteRouteInputs
   */
  route: Array<SimplePath>;
  /**
   * Fee in basis points (1/10000) for each route. If specified, this percentage of each amountIn value will be sent to feeReceiver
   * @type {Array<string>}
   * @memberof QuoteRouteInputs
   */
  fee?: Array<string>;
  /**
   * The Ethereum address that will receive the collected fee. Required if fee is provided
   * @type {string}
   * @memberof QuoteRouteInputs
   */
  feeReceiver?: string;
  /**
   * A flag indicating whether to exclude RFQ sources from routes
   * @type {boolean}
   * @memberof QuoteRouteInputs
   */
  disableRFQs?: boolean | null;
  /**
   * A list of swap aggregators to be ignored from consideration
   * @type {Array<string>}
   * @memberof QuoteRouteInputs
   */
  ignoreAggregators?: Array<string> | null;
  /**
   * Hex string of block number
   * @type {string}
   * @memberof QuoteRouteInputs
   */
  blockNumber?: string;
}

/**
 * @export
 */
export const QuoteRouteInputsRoutingStrategyEnum = {
  Ensowallet: "ensowallet",
  Router: "router",
  Delegate: "delegate",
} as const;
export type QuoteRouteInputsRoutingStrategyEnum =
  typeof QuoteRouteInputsRoutingStrategyEnum[
    keyof typeof QuoteRouteInputsRoutingStrategyEnum
  ];

/**
 * Check if a given object implements the QuoteRouteInputs interface.
 */
export function instanceOfQuoteRouteInputs(
  value: object,
): value is QuoteRouteInputs {
  if (!("route" in value) || value["route"] === undefined) return false;
  return true;
}

export function QuoteRouteInputsFromJSON(json: any): QuoteRouteInputs {
  return QuoteRouteInputsFromJSONTyped(json, false);
}

export function QuoteRouteInputsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): QuoteRouteInputs {
  if (json == null) {
    return json;
  }
  return {
    "chainId": json["chainId"] == null ? undefined : json["chainId"],
    "fromAddress": json["fromAddress"] == null
      ? undefined
      : json["fromAddress"],
    "routingStrategy": json["routingStrategy"] == null
      ? undefined
      : json["routingStrategy"],
    "route": ((json["route"] as Array<any>).map(SimplePathFromJSON)),
    "fee": json["fee"] == null ? undefined : json["fee"],
    "feeReceiver": json["feeReceiver"] == null
      ? undefined
      : json["feeReceiver"],
    "disableRFQs": json["disableRFQs"] == null
      ? undefined
      : json["disableRFQs"],
    "ignoreAggregators": json["ignoreAggregators"] == null
      ? undefined
      : json["ignoreAggregators"],
    "blockNumber": json["blockNumber"] == null
      ? undefined
      : json["blockNumber"],
  };
}

export function QuoteRouteInputsToJSON(value?: QuoteRouteInputs | null): any {
  if (value == null) {
    return value;
  }
  return {
    "chainId": value["chainId"],
    "fromAddress": value["fromAddress"],
    "routingStrategy": value["routingStrategy"],
    "route": ((value["route"] as Array<any>).map(SimplePathToJSON)),
    "fee": value["fee"],
    "feeReceiver": value["feeReceiver"],
    "disableRFQs": value["disableRFQs"],
    "ignoreAggregators": value["ignoreAggregators"],
    "blockNumber": value["blockNumber"],
  };
}
