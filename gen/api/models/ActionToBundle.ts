/* tslint:disable */
/* eslint-disable */
/**
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * @export
 * @interface ActionToBundle
 */
export interface ActionToBundle {
  /**
   * Protocol to interact with
   * @type {Array<string>}
   * @memberof ActionToBundle
   */
  protocol: Array<string>;
  /**
   * @type {string}
   * @memberof ActionToBundle
   */
  action: ActionToBundleActionEnum;
  /**
   * @type {object}
   * @memberof ActionToBundle
   */
  args: object;
}

/**
 * @export
 */
export const ActionToBundleActionEnum = {
  Approve: "approve",
  Borrow: "borrow",
  Deposit: "deposit",
  Harvest: "harvest",
  Permittransferfrom: "permittransferfrom",
  Redeem: "redeem",
  Repay: "repay",
  Swap: "swap",
  Transfer: "transfer",
  Transferfrom: "transferfrom",
  Route: "route",
  Call: "call",
  Split: "split",
  Merge: "merge",
} as const;
export type ActionToBundleActionEnum =
  typeof ActionToBundleActionEnum[keyof typeof ActionToBundleActionEnum];

/**
 * Check if a given object implements the ActionToBundle interface.
 */
export function instanceOfActionToBundle(
  value: object,
): value is ActionToBundle {
  if (!("protocol" in value) || value["protocol"] === undefined) return false;
  if (!("action" in value) || value["action"] === undefined) return false;
  if (!("args" in value) || value["args"] === undefined) return false;
  return true;
}

export function ActionToBundleFromJSON(json: any): ActionToBundle {
  return ActionToBundleFromJSONTyped(json, false);
}

export function ActionToBundleFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ActionToBundle {
  if (json == null) {
    return json;
  }
  return {
    "protocol": json["protocol"],
    "action": json["action"],
    "args": json["args"],
  };
}

export function ActionToBundleToJSON(value?: ActionToBundle | null): any {
  if (value == null) {
    return value;
  }
  return {
    "protocol": value["protocol"],
    "action": value["action"],
    "args": value["args"],
  };
}
